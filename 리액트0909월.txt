React Hooks
-useState( )
-useRef( )
-useEffect( )
-useReducer( )

*useState( )
*useRef()
*useEffect()
*useReducer( )

*useMemo( )
*useCallback( ) 
-> 최적화!!!!  
유의사항_
1.최적화는 반드시 웹앱의 재작 및 기능구현이 마무리되는 단계에서 해야함!!
2. 모든 기능을 최적화 할 필요는 없음!!!!
3. 최적화 => 컴포넌트 구조 > 정상 / /잘 짜여져있는지 !!!!

*Context => "책 목록" => 맥락

>



useMemo( callback, [의존성 배열])

앱&웹 페이지

최적화!!!
> 컴포넌트 기반
> 마운트 // 렌더링 // 언마운트 
> 메모이제이션
> Memoifzation 기법
> useMemo ( )
> React.memo 속성!!!
> 고차 컴포넌트 // Higher Component 
- 기존의 컴포넌트를 업그레이드 > 새로운 무언가로 바뀐다.
- 기준 =>state에 따라서 렌더링 여부

> 횡단 관심사 = Cross Cutting Concerns

특정 컴포넌트를 고차 컴포넌트로 업그레이드 시킴.
 으로 인해서 
부모 컴포넌트 아래에 있는 모든 자식 요소의 컴포넌트들이 고차 컴포넌트화 되어있는 해당 요소의 상태 변화에 따라같이 렌더링 되지 않도록 조치를 취한 형태 => 횡단 관심사로 부터벗어나게 했다!!

*editor 컴포넌트 => 값이 신규 입력!!
> App 컴포넌트 업데이트 
> 함수 역시 > 리렌더링!!!




















