*팀프로젝트 진행 시, git, git-hub 사용방법

- 공통된 요소 => header / footer => 누군가가 작업.
- 병합

1.PM _> 레포지토리 생성.
 - 레포지토리 생성 후 -> 초대 (Add collaborators to this repository  (깃 네임)
 -이미 있다면 setting -> collaborators -> add people

2.팀원_> 초대 수락
 - 우측 상단, notification -> invite 메일 . accept ->
 - 수락하면 레포지스토리가 추가됨.

3.PM_> 새로운 폴더 생성.
 - 팀 프로젝트를 진행하기 위한 별도의 전용 루트 폴더 생성
 
4.PM_ 터미널
 - git bash 로 터미널 변경 _> git init -> .git이 폴더에 생성 됨.
 - git remote add origin git-hub주소
 - git remote -v   _ 연결 확인. fetch,push 둘 다 확인
 - git add .    / git status   /    git commit -m "message"   _ 데이터 라벨 - > 약속 필요
 - git push origin master 

5.PM_Branch 생성, 설정.


6.*PM & 조원 어떤 방식으로 브랜치 생성+병합 하는가?
깃허브 -> 상단 projects -> link a project -> create new project
module 선택 -> 가장 많이 사용하는 모드_ kanban 보드

프로젝트 보드 설정 - > manage access

*Kanban 칸반보드
Todo  / in progress / done   = 작업 완료시 done 으로 보내면 됨.
각 칸반 영역 하단 add item -> 해야할 작업 목록  ex)main header , login  -> 생성된 백로그 작업 리스트명 클릭
메모,백로그 작성.

Convert to issue -> 레포지토리 선택(*PM이 생성 해 둔 레포지토리 선택) -> Development_Create a branch 

신규로 브랜치 생성 -> develop
create branch - > 명령어 복사 git fetch origin -> vs.code 터미널 붙여넣기.
feature -A 붙여넣기 

팀원

*feature -A 를 작업해야하는 상황
1) git pull origin master (*나의 로컬 컴퓨터에 저장된 데이터도 살리고 원격 저장소에 커밋된 데이터도 가져와서 병합)
2) git clone "레포지토리주소"
원격 저장소에 커밋된 데이터를 그냥 가져와서 시작하겠다.

\\ 자료를 가져옴 ->
작업 시작~~~~~ 작업을 했음 -> 업로드?
 - 깃허브에 올려야함 -> git add . -> commit, push origin -feature-A

상단 pull request -> new pull request
base;develop / compare; feature-A   /  create pull request ->
add a title @@@ mearge요청 _내용입력 -> 보내기.

\PM -> recive_ comment , approve, request 
\팀원-> 확인 
\PM -> 병합 confirm marge

		*****
팀원 A,B 가 동시에 marge 요청시**
project -> product cart ->  creat branch 







*실무에서 작업시 환경
1) PM 1명
2) 중간 관리자 1명
3) 막내급 개발자 2명 
-> 막내급 개발자 메인 1차 작업 -> master commit XXXXX

Branch 브랜치 = 하나의 레포지토리에서 공간을 나눠줌. section 
------------------------------------------------------------------------------------------------
** Branch **
PM
1) CLI 방식으로 브랜치 생성
 - git checkout -b "브랜치명"
 - git checkout -b develop

최종 납품할 제품 데이터 보관 메인 브랜치 : master / main
각 조원들이 작업한 제품 데이터를 1차 병합 및 보관할 서브 브랜치 필요 : develop

git add ./ git commit -m "develop"/ git push origin
-----------------------------------------------------------------
git push --set-upstream origin develop

-> PM은 조원들에게 . merge 요청은 develop에 요청 하면 됩니다.

-> PM 은 브랜치 protected.
  -  setting branches -> add branch ruleset (classic)

Require a pull request before merging
lock branch
Do not allow bypassing the above settings


-------------------------------------------------------------------------------------------------------
















