React 
1. facebook // meta

2. JS : 웹 브라우저에서만 읽을 수 있음. 
> 라이브러리 : 기존 프로그래밍 언어 문법 체계를 존중!! => 해당 문법 위에서 본인들이 만들어 놓은 명령 시스템을 얹혀서 구동될 수 있도록 만든 시스템

>프레임워크 : 본인들만의 문법 체계 , 기존 프로그래밍언어를 조합해서 사용할 수 있도록 만들어놓은 시스템

3. Node기반 _> 웹 브라우저가 아닌 곳에서도 읽을 수 있게끔.

4. 크롬 _> V8검색 엔진 // 자바스크립트

5. 자바스크립트를 웹브라우저가 아닌 곳에서도 사용할 수 있는 실행환경을 만들어보자 => Node

6. Node 위에서 작업되는 모든 작업물  > 프로젝트 
Node Project (=package) Manager _ npm

7.npm i....

8.npx create-react-app .

--------------------------
1.각각 개별적인 페이지 + 헤더, 푸터
> iframe : 불편 // 사이즈 등등
> 컴포넌트 단위 쪼개서 작업 후 재결합
> 최근 UI/UX 디자인 영역 핫 키워드

>PM 헤더, 푸터 컴포넌트
>조원: 헤더 컴포넌트 + 메인 // 헤더 컴포넌트 + 상세 // 장바구니 > 프로젝트: 파일 1개당 용략 //디버깅 효율

2.CSR 방식
> 기존 : 팀 프로젝트 작업 => SSR 방식 (Sever Side Rendering)
> CSR : Client Side Rendering ->서버

3. 웹 브라우저가 아닌 곳에서 사용!!
> 기업 => 웹 페이지 리뉴얼 & 앱
> React-Native => app 개발  /   플러터에 밀려서 현재는 중단.


/////////////////////////////////
React 설치 후 삭제 해야하는 reset 요소
src >  App.test
src > logo.svg
src > reportWebVitals
src > setupTest

-------------------------------------
코드 삭제 요소들
> App.js > logo
>index.js > reportWebVitals

----------------------------------------
node_modules  => 외부로 이동할때는 지우고 이동. // 다시 설치=> npm i


	**** React가 작동되어지는 원리!!!!
1. 모든 요소들이 Componet 기반으로 운영
2. Component => JS 

과거 -> 2018년 이전!!
> React.js의 모든 컴포넌트들이 Class  -> 리액트 훅 사용 못함
> 현재 모든 React.js의 컴포넌트들이 함수형 컴포넌트. => 첫글자 무조건 대문자  

jsx => JS + XML 의 약자.

작업하는 모든 요소는 src 폴더 안에 존재해야 한다.

React의 기본문법 => JSX 
> JavaScript&Xml

1.함수형 컴포넌트의 return 출력부 !!! => UI화면 출력 -> 절대로 배열 및 객체의 형태로는 사용할 수 없음
출려부 공간에는 반드시 숫자, 문자형태의 자료형 -> UI 화면 출력 => 절대로 객체 형태로는 직접XXX

2. 산술 표현 및 문자식!!
 -  숫자 및 문자 연산 가능!!

3. 논리표현식 가능!!! =>Boolean

4.닫힘 표현식 싱글태그 인것처럼 표현 <header />

5. 무조건 , 최상위 부모가!!! 반드시 존재
-Fragment Element 

6.html = > class / class Name

7. 리액트 전용 스타일 컴포넌트 => styled=component

8.React 출력부는 "문" 사용 불가!!! "식" 은 사용가능!!
ex)조건문, 반복문 .

9.React & CSS 스타일 시트 / 외부 스타일 시트 & 

10.React > * Props * => Property 약어.

> Component 기반 => 각각의 컴포넌트간의 props 전달하고 받을 수 있음.
> props는 반드시 부모에서 자식으로 일반 통행!!!
> 유틸리티!! = > Redux // Saga // Thunk => 미들웨어 
> React Query 등등 
> 속성 => 객체!!!
>구조분해할당
> defaultProps 속성 = > 만약에 누락된 데이터가 있다면 대체가능!!!
>Props를 통해서 컴포넌트도 보낼 수 있음


Props Drilling

Props : 객체의 속성 유사한 형태 띄고 있음
-1) 단일 값으로도 전달 가능
>props의 값을 전달하는 쪽 key = {value}
>props의 값을 전달받는쪽 Object

2)여러개의값으로도 전달 가능
> props를 여러개 직성해서 전달하는 방법
> Props로 보내고자 하는 요소들을 객체로 생성
> 전개 연산자 구문으로 전달하는 방법

3) 컴포넌트의 형태를 띄고있는 자료역시 전달 가능
>자식 요소의 컴포넌트 형태 전달 가능!!!
> Props의 값을 받아오는 쪽에서 children이라는 key값으로 찾아올 수 있었음

-컴포넌트 간 Props 값을 전달하는데 있어서 대 원칙이 존재
1)반드시 부모->자식 (*일방통행만 가능)
 -자식 -> 부모 XXXX 
 -자식 -> 자식 XXXX 불가능

-  Event : JS에서 언급했던 이벤트와 동일!!!

- State : 상태
-> State _가 존재해야 Dom에서 무엇이 바뀌었는지 체크가능. 
이런 state의 상태, 이벤트등을 관리하기 위해 -> React Hooks -> 리액트 훅 _ 템플릿.

1) useState ****
 리액트는 가상돔을 사용하기 때문에 반드시 하나의 UI 화면에서 상태변화가 발생되는 요소는 state라는 변수안에 담아서 관리를 해야 한다.!!
이때, state라는 변수는 리액트 안에 내장되어있는 리액트 훅 함수 중 "useState"를 사용하면 된다!!!!
useState라는 훅 함수는 state라는 변수와 setState() 함수를 모두 반환하는데, 이 때 setState()함수만이 유일하게 state 변수를 제어할 수 있다.

2) useRef : UI 화면에 출력된 요소들을 제어할 수 있는 리액트 훅 함수 =>바닐라 자바스크립트 내 quareySelector와 비슷한 기능!!























