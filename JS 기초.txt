**JS 기초 
각자의 기능을 적절히 활용

 html = 구조 // 뼈대

 css = 스타일 정의
 > transition / transform / animation

 js = 동적인 페이지를 구현
 > DOM 
 

2. 자바스크립트 
> 자바 (X) 

3. 자바 스크립트 -> 한문장으로 표현
> 객체 지향 프로그래밍 언어
> 알고리즘 & 자료구조 토대로 무언가를 생성.
만들어낼 수 있어야 진정한 언어!
> 라이브러리 // 프레임워크 (무진장 많음)


4.객체지향
 - 객체 : 어떤 정보 및 데이터를 효율적으로 관리하기 위해서 만들어 놓은 저장공간
 ------------------------------------------------------------------------------------------------

*html 문서 : 웹 브라우저 

@A- fetching 단계
>html 문서를 웹 브라우저가 전달받아서 본인이 읽을 수 있는 형태로 변환시키는 작업


@B- parsing 단계
> html 문서를 웹브라우저가 실제 읽어나가는 단계
> 반드시 위에서 아래로 (*먼저 작성한 문서를 먼저 읽고,
나중에 작성한 문서를 가장 나중에)
> div * 5 : position: absolute
> script 태그를 만나는 순간 =>  멈춤. =>  script 태그를 향해 돌진.
> 동적인 페이지를 개발
> 클릭 / 마우스 오버
> html 내 특정 태그 -> Node 

1) body 태그 안에 script 태그를 사용.   =   내부 스크립트
   -내용이 길어지면 읽는 속도가 걸리기에, 일정 시간 동작 안하는 상황이 발생 할 수 있음

2) script 태그 속성 : async // defer

async : 비동기 처리 
?> 동시에 여러가지의 작업을 수행 한다.
> 현재 주어진 문제를 해결하면서, 동시에 다른 기타 요소들을 해결할 수 있는 방식
단점: 동시에 읽지만, 두개중 한 쪽을 먼저 읽는다면 그냥 끝내버림. 

defer: 병렬방식으로 html & script를 읽고, 둘 중 하나가 먼저 종료되더라도 일단 기다리고, html, script 모두 다 읽게되면 그때 fetching

_> defer 대신 스크립트에서 window.addEventListener("DOMContentLoaded", () => {}); 를 줘도 됨.


sync : 동기 처리
> 먼저 실행괴고 있는 어떤 문제를 다 처리해야지만, 그 다음 문제를 처리 할 수 있는 방식.


@C- executing 단계 : 실제 웹 브라우저가 읽어 내려온 문서를 웹 브라우저 출력을 실행시키는 단계







*개념

1.변수 
 - 데이터를 담는 바구니!
 - 연산작업 // document 값 // Window 값
 - 3개의 키워드를 활용해서 변수 선언!!
 - 선언 = 생성 !! 
 > var  _ (*가급적 사용 X )
Hoisting 사용X 호

 > let _ (*차선 고려) _ 재선언X , 재할당 O 
 > const _ (*최우선 고려) : 재선언 X , 재할당 X   /  라는 제약.
 -  변하지 않은 고정값 = 상수값
ex) 프로그램 개발. -> 1920px , 슬라이드 개수 5개 고정. const
- 스크롤을 내릴 때, 내려간 값에 따라 무언가를 변경? = let


항상 변수의 값이 먼저 들어와 있는지 확인 해야함


- 선언 = 생성 !!!
- 값을 할당 !!!


2. 자료형
> 현재 변수안에 할당된 값의 자료형태를 확인 할 수 있도록 해주는 함수 =>typeoF()
>숫자형 : 숫자!!! = number

 - 문자열 : 문자 => string => "" // '' // `` 
> 형 변환!!!
!!!"   "
!!!

 - 논리형 : 참 or 거짓 => boolean >  true || false

 - 기타형 : undefined = "미정"인 "값". / null _ 유효하지 않은 값.    미정.
> 템플릿 리터럴 문법 
변수안에 담긴 값 + 문자열 섞어서 

 - 논리 - 객체 :  object > 단일 값이 아닌, 복합적인 데이터 자료를 저장, 보관.

 - 배열 : 해당 자료형태 안에 있는 모든 자식요소들에게 번호를 매길 수 있음 => 해당 번호에 할당된 값만 찾아올 수도 있고,
 그 번호애 특정 값을 교체해서 넣을 수도 있음 => 자식요소들이 각각의 번호를 가지고 있기 때문에, 배열안에 답겨있는 총 자식들의 개수도 파악!!

index 값 : 자식요소들의 순서 번호    =>>> 반드시 0에서 부터 시작.  1=> 0 / 2= 1
length 값 : 해당 배열 안에 담겨있는 총 자식의 개수 
=>> 무조건 해당 배열의 마지막 자식요소 아이템의 index 값은 배열의 전체 총 자녀 개수에서 -1을 한 값과 무조건 동일.

 - 심벌 : 유일무이한 값을 생성 및 보관, 관리!!  ex) ID PW 

 - 함수 : function // arrow 
 

컴퓨터는 CPU : 메모리 공간 제어
변수 // 색상 => 메모리 생성 
메모리의 가장 최소 단위 : 비트
비트 => 0,1만 표현
바이트 : 8개의 비트가 모이면 1바이트 => 
자료형 : 문자 // 숫자 
숫자 => 무조건 64비트 = 8바이트

ex) 변수 500개 선언 => 숫자 
> 4000 바이트 


1.직접 변수영역에 값을 할당하는 경우, 값이 어느 범위까지 변경될지 아무도 예측 불가!!

자료형 
 1) 원시타입 : 숫자,문자,논리,심볼,null,un

 2) 참조타입 : 객체, 배열, 함수 
    > 참조: 주소값 참조.

=>전개 연산자. 

자바스크립트 : 싱글 스레드 언어 !!! single thread launguage

*형변환 !!!
> 문자 + 숫자 => 연산,무조건 결과 문자!!!

의도적 형 변환
1) 의도적으로 숫자의 형태로 변환!!!
Number( ) : 숫자가 아닌 값도 숫자로 바꿈!!! 
parseint( ) : 인자값으로 들어온 숫자 정수값으로   _  소수값 XXXXXXXX
parsefloat( ) : 인자값으로 들어온 숫자를 실수 값으로 표현 => 소수점을 가지고 있는 숫자!!!

2) 의도적으로 문자의 형태로 변환!!
String ( ) : 모든 값을 싹다 문자열로 바꿈!!! 
toString ( ) : null, undefined 를 바꾸지 못함.

3) 의도적으로 논리값으로 형태를 변환!!!
Boolean( ) : 모든 값을 논리값으로 바꿈.
 - 존재하는 값은 거의 대부분 true 
 - undefined // null / 0

1.변수 
2. 자료형 
3.연산자 
+-/*: 사칙연산

%: 나누기 후 나머지값을 찾아오는 연산자 
++ -- : 증감 연산자
> 증감연산자를 사용하는 위치에 따라서 결과값이 완전히 달라진다!!!
> 증감연산자가 피연산자 앞에 입력되면, 연산작업을 먼저 실행!!!
> 증감 연산자가 피연산자 뒤에 입력되면, 연산작업을 나중에!!!

복합대입 연산자 => 할당연산자

비교연산자
-느슨한 연산자
-엄격한 연산자
-부정 연산자 => ! 

논리 연산자 ( *참 VS 거짓 )!!
-&& : and 연산자
> 좌항 (왼쪽에 있는 항) &우항 모두 참이여야 최종 결과 값으로 true 를 보냄.
> 40대 남성

- || : or 연산자
>좌항 & 우항 둘 중에 하나만 참이어도 true 
> 40대 or 남성



4. 조건문 
> A 일 때, 무언가 !! but  A가 아니면 무언가!!
> if 문 (*단독으로 여러면 사용 가능하다~)
> if else 문 (* 반드시 조건식 true 여야 실행함)
//그렇지 않은 경우 else 문)

> 반드시 조건식 true 여야지만 실행!!!

>else if 문 복수의 조건식을 따지고자 할때!
> 삼항조건 연산자 !!!

>switch 문
 - 선택할 수 있는 조건들이 다양한 경우!!
**switch , case , break 
switch() / case / break / default (스위치에 할당하는 예외의 경우)

5. 반복문 (*잘 사용하는 사람은 중급 레벨급에서는 king)

>배열 특화 반복문
 - 기본 for 문
 - forEach 문
- for ..of 문

객체 특화 - in
 - for ...in 문



 - while 문
 - do...while 문




 - break 문*:
 강제 종료의 의미를 가지고 있음.

 - continue 문*
 건너뛰기의 의미를 가지고 있음.  => 특정 구문 건너뛰기(안나오게) ex) 짝수 홀수만 나오게 가능.



> iterable한 자료형만 사용할 수 있음
-  반복시킬 수 있는 자료형 
- iterable한 속성 > iterator 객체 만의 전유물 
-객체, 배열

>Set ( ) 

> css : 애니메이션 : 반복할 수 있는 iteration 

Callback : 야간 Call Taxi    call = 대기중.  =   콜백함수 - 기능적 의미를 내포하고 있는 명칭
함수가 실행되면?=>대기하다가 =>실행.

Function(*일반함수) 

Arrow Function : 화살표함수 = 하드웨어적 의미를 내포하는 명칭.

*CS 기본개념
1) Variable
2) Scope = 범위******
> 전역 => Global // 1번만 작성해 놓으면 언제, 어디서든 가져다가 사용 가능.
> 지역 => Local // 특정 범위 안에서 설정이 됨. 그 범위 안에서만 사용이 가능하다.


>Block // 특정 제어문의 조건식 안에서 설정된 변수들은 Block 범위에서만 움직임.

> Script // 전역변수'처럼' 행동.!!! => let ,const 

디버깅!!! 작업	




>프로그래밍 언어 
실행문 (*C언어) // 표현식문 => 다중 패러다임 언어!!!
결과값 실행 => 메모리 공간 


>함수 
선언형 // 명령형 

> 프로그래밍 코드 작성 // 실행 
객체지향 // 절차지향


*JS 진영 2가지 모듈
> 모듈 : 레고 블럭
> Common JS 모듈 : Node
> ESM 모듈 : 공식모듈
 
> 개발역역 -> 소비자 트랜드를 따라감.
> 소비자 -?> 문화에 따라 변화.
> 모바일 디바이스 
> 눈에 보이는 화려함 * 시각, 동적인 페이지 -
> 늘어나는 코드의 길이
> 에러 // 오류
> 스크립트 분할 작업.


































