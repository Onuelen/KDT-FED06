0822 _ 데이터 통신

 *status code *
200: 데이터 통신 성공  // 

4XX : 클라이언트가 정상적이지 않은 요청을 서버에게 했다. > 잘못된 주소
>주소는 맞지만 해당 주소안에 내포되어있는 값이 X

5XX : 클라이언트는 정상적으로 서버에 request를 했으나, 서버측에서 정상적으로 response할 수 없는 상황


 1 ) 클라이언트 & 서버 통신 : 데이터 통신

 특정 사이트 이미지 / 텍스트 *서버
- 컨테이너 ( * 자료 보관 저장소)

*클라이언트 -> ( 사용자 / 웹브라우저 => 주소 || 포털 =>
> request // response Header 
> 서버 물리적인 공간 (*java , python, c++)  // 웹브라우저

4) JSON = 서버와 클라이언트 모두 인식.식별 가능한 언어!!!
> Javascript Object Notation : 자바스크립트 객체 표기법
> 객체 ; / json= ,사용

1. JSON의 생성 이유
ex) 쇼핑몰 생성 -> 상품 정보가 필요함 -> 카테고리,구매정보, 이벤트 상품인지? 등을 

5) JSON을 클라이언트 & 서버 편리하고 효율적으로 사용하기 위해서 메서드 함수!!!!!

객체를 json 형식의 파일로 변환시키고자 할 때
JSON.stringify(ex) : 객체 안에 있는 데이터를 문자형태로 바꿔주는 함수

json을 객체형식의 파일로 변환시키고자 할 때
JSON.parse( ) : json 데이터를 웹브라우저가 parsing할 수 있는 객체형태로 바꿔주는 함수

6) JSON 데이터가 아무리 좋아도 가져오지 못하면 무쓸모!!!
JSON 데이터를 가져오는 방식 => AJAX = 일종의 통신 "방식" -> 
Asynchronous(비동기적) Javascript And XML(html 보다 유연한 문법을 가진 문서)

7) json데이터를 클라이언트 측에서 가져와서 사용할 수 있는 "방법"
XMLHttpRequest( ) => 자바스크립트의 생성자 함수 혹은 클래스로 만들어진 프로토타입 !!!

readyState : 
클라이언트 입장에서 서버로부터 json데이터를 가져오는데 있어서 현재 어떤 상태인지를 확인할 수 있도록 도와주는 정보
0: 클라이언트 아직 서버에게 그 어떤 요청도 하지 않은 상태

1: 클라이언트가 서버에게 자료를 요청하고 성공한 상태!!!!
2: 클라이언트가 서버에게 자료를 요청한 후 서버가 해당 요청에 대한 응답 메세지를 전달한 상태
3: 서버가 클라이언트에게 전달한 자료를 클라이언트가 로딩중인 상태
4: 서버의 자료 전송 종료 및 클라이언트의 자료 로딩 완료로 인해 이제 클라이언 측에서 자료를 정상적으로 사용할 수 있는 단계

8) 외부에서 데이터를 송수신 하는 경우, 예외조항 처리!!!!
1) 예외조항처리시가 이루어지지 않았을 경우, 에러가 발생하더라도 에러인지 아닌지 고객들은 인지 할 수 없음.

	=====
reqres.in/api/product/10
XMLHttpRequst를

0823 금
- 비동기 프로그래밍
> Callback // Promise // fetch // async & await

1. 자바스크립트 언어 정의
- 객체지향 프로그래밍 언어
- 프로토타입 기반 프로그래밍 언어
 - 싱글 스레드(Thread = 길 / 도로) 방식 프로그래밍 언어
 - 싱글스레드 > 동기처리 방식
 - 멀티스레드 > 비동기처리 방식
 - 콜백함수 
 - 프로미스
 - fetch 
 - async & await

원래 JS 는 싱글스레드 언어이다 = 동기처리
콜백함수를 활용해서 멀티스레드 언어 인것 처럼 비동기처리 방식 활용가능.


콜백함수

async & await

1)카카오 맵 API

2) 전국 캠핑장 정보
































